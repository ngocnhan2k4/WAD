generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id                Int        @id @default(autoincrement())
  password          String?
  type              String?
  username          String?    @unique
  socialId          String?    @unique
  fullName          String    
  verified          Boolean?   @default(false)
  verificationToken String?
  registration_time DateTime?
  state             String?
  user_image        String?
  role              Role?
  Orders            Orders[]
  UserCart          UserCart[]
  Reviews           Reviews[] 
}

model Categories {
  category_id   Int       @id @default(autoincrement())
  category_name String
  Product       Product[]
}

model Images {
  ordinal_numbers Int
  product_id      Int
  directory_path  String?
  Product         Product @relation(fields: [product_id], references: [product_id])

  @@id([ordinal_numbers, product_id])
}

model OrderDetail {
  order_detail_id Int     @id @default(autoincrement())
  order_id        Int
  product_id      Int
  quantity        Int
  price           Float
  Orders          Orders  @relation(fields: [order_id], references: [order_id])
  Product         Product @relation(fields: [product_id], references: [product_id])
}

model Orders {
  order_id      Int           @id @default(autoincrement())
  user_id       Int
  total_amount  Float
  status        String
  creation_time DateTime
  shipping_address String?
  OrderDetail   OrderDetail[]
  User          User          @relation(fields: [user_id], references: [id])
  Payments      Payments[]
}

model Payments {
  payment_id     Int      @id @default(autoincrement())
  order_id       Int
  payment_date   DateTime
  amount         Float
  payment_method String
  Orders         Orders   @relation(fields: [order_id], references: [order_id])
}

model Product {
  product_id     Int           @id @default(autoincrement())
  product_name   String
  category_id    Int
  manufacturer   Int
  original_price Float
  current_price  Float
  creation_time  DateTime
  description    String
  stock_quantity Int
  total_purchase Int
  Images         Images[]
  OrderDetail    OrderDetail[]
  Categories     Categories    @relation(fields: [category_id], references: [category_id])
  Suppliers      Suppliers     @relation(fields: [manufacturer], references: [supplier_id])
  Reviews        Reviews[]
  UserCart       UserCart[]
}

model Reviews {
  ordinal_numbers Int
  product_id      Int
  user_id         Int
  review_detail   String?
  creation_time   DateTime  @default(now())
  Product         Product @relation(fields: [product_id], references: [product_id])
  User            User    @relation(fields: [user_id], references: [id])

  @@id([ordinal_numbers, product_id])
}

model Suppliers {
  supplier_id Int       @id @default(autoincrement())
  brand       String
  Product     Product[]
}

model UserCart {
  user_id    Int
  product_id Int
  quantity   Int
  price      Float
  Product    Product @relation(fields: [product_id], references: [product_id])
  User       User    @relation(fields: [user_id], references: [id])

  @@id([user_id, product_id])
}


